Servis yöneticisi
+++++++++++++++++
Servis yöneticisi sistem çalışırken gereken sürekli olarak çalışan veya bir kere çalıştırılan komutları başlatır. En yaygın olarak kulanılan servis yöneticileri openrc, sysv-init, systemd servis yöneticileridir. Bu bölümde servis yöneticisinin çalışma mantığını ve temel servisler anlatılacaktır.

Öncelikle servis yöneticisi **PID1** olarak çalıştığı için asla kapanmamalıdır. Eğer kapanırsa kernel panic hatasına sebep olur. Bu durumun önüne geçmek için servis başlatma işlemleri tamamlandıktan sonra servis yöneticisi sonsuz bekleme moduna geçer. Ayrıca genellikle servis yöneticileri servis açıp kapatma gibi işlemleri sistem çalışır durumdayken gerçekleştirebilmek için sürekli olarak komut bekler. Bu işlem de sonsuz bekleme modu yerine geçer.

.. code-block:: C

	...
	int main(int argc, char *argv[]){
	    ...
	    while(1){
	        wait_signal();
	        signal_handler();
	    }
	    return 1; // buraya ulaşılamaz.
	}

Yukarıdaki örnekte **wait_signal** ve **signal_handler** adında 2 adet fonksiyonumuzun olduğunu düşünelim. ilk fonksiyonumuz yeni bir sinyal olma durumunu algılayana kadar beklemeye ikinci fonksiyonumuz ise gelen sinyali algılayıp ona göre işlem gerçekleştirmeye yarar. Gördüğünüz gibi program asla kapanmıyor.

Servis yönetici servisleri sıra ile çalıştırmalıdır. Burada 2 tip yaklaşım söz konusudur. İlki servislerin birbiri arasında tıpkı paket sisteminde olduğu gibi bir bağımlılık sistemi olması ve bu sıraya uygun olarak başlatılmasıdır. Bu yaklaşım paket yüklemedeki algıritmayla benzerdir. İkinci yaklaşım ise servislerin hangi öncelik ile çalıştırılacağının önceden belirlenip ona göre paketenmesidir. Bu dokümanda ikinci yaklaşım üzerinde durulacakdır.

Servis dosyaları servis yöneticisinin kullandığı temel talimatları içeren dosyadır. Genellikle bash betiği veya ini dosyası şeklinde yazılır.

.. code-block:: shell


	start(){
	    start-stop-daemon --start dbus-daemon --system 
	}

	stop(){
	    start-stop-daemon --stop dbus-daemon --system 
	}
	case "$1" in
	    start)
	        start
	        ;;
	    stop)
	        stop
	        ;;
	    *)
	        echo "Usage: $0 {start|stop}"
	        exit 1
	        ;;
	esac

Yukarıda basit bir sysv-init servisi örneği verilmiştir. sysv-init ile beraber gelen **start-stop-daemon** komutu bir komutun arkada başlatılmasına ve gerektiğinde kapatılmasına yardımcı olur. sysv-init servisleri çalıştırılırken **service** komutu kulanılır. bu komut servis dosyamızı okur ve istenen işlemi gerçekleştirir.

.. code-block:: shell

	$ service apache2 start

Sıradan bir sisstem açılırken çalıştırılan başlıca servisler şunlardır:

* sysinit
* tmpfiles
* udev
* dbus
* network-manager

**sysinit** kök dizini rw olarak bağlayıp **/etc/fstab** dosyasındaki talimatlara göre bağlanacak dizinleri bağlamaya yarar. Bununla birlikte servis yöneticisinin bazı ihtiyaçlarını da karşılayabilir.

.. code-block:: shell

	# sistemi rw olarak bağlamak için
	$ mount -o remount,rw /

**tmpfiles** servisi /run dizni içerisindeki dosyalar ve dizinler gibi bazı sistemin ihtiyaç duyduğu ve her seferinde tekrar oluşturulması gereken dizinleri oluşturur. Ayrıca açılışta silinecek dosya veya dizinler varsa silmeye yarar.

.. code-block:: shell

	# systemd-tmpfiles aşağıdaki gibi çalıştırılır.
	systemd-tmpfiles --create --remove --boot --exclude-prefix=/dev

**udev** servisi aslında daha önce initramfs içerisinde başlatılmıştı. fakat initramfs içerisinde bütün sürücüler yer almadığı için servis olarak tekrar çalıştırılması gerekir. 

.. code-block:: shell

	# udevd zaten çalıştığı için yaznız udevadm çalıştırılır.
	$ udevadm trigger -c add
	$ udevadm settle

**dbus** servisi uygulamaların birbiri ile haberleşmesini sağlayan köprüyü sağlayan servistir. Linux dağıtımlarının tamamına yakınında dbus servisi önyüklüdür. 

.. code-block:: shell

	# eğer yoksa /run/dbus dizini oluşturmalısınız. (Genellikle tmpfiles servisi bu dosyayı oluşturur.)
	$ mkdir -p /run/dbus
	$ dbus-daemon --system

**network-manager** servisi ağ bağlantısı yapmaya yarayan servistir. Bu servis udev ve dbus servisinden sonra çalıştırılmalıdır.

.. code-block:: shell

	$ NetworkManager # -d parametresi eklerseniz debug çıktılarını görebilirsiniz.
